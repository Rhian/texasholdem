package org.cordacodeclub.grom356

import org.junit.Assert.assertEquals
import org.junit.Test

class CardTest {

    @Test
    fun checkAllIntValues() {
        assertEquals(0, Card(Card.Rank.ACE, Card.Suit.SPADE).intValue)
        assertEquals(1, Card(Card.Rank.ACE, Card.Suit.HEART).intValue)
        assertEquals(2, Card(Card.Rank.ACE, Card.Suit.DIAMOND).intValue)
        assertEquals(3, Card(Card.Rank.ACE, Card.Suit.CLUB).intValue)
        assertEquals(4, Card(Card.Rank.KING, Card.Suit.SPADE).intValue)
        assertEquals(5, Card(Card.Rank.KING, Card.Suit.HEART).intValue)
        assertEquals(6, Card(Card.Rank.KING, Card.Suit.DIAMOND).intValue)
        assertEquals(7, Card(Card.Rank.KING, Card.Suit.CLUB).intValue)
        assertEquals(8, Card(Card.Rank.QUEEN, Card.Suit.SPADE).intValue)
        assertEquals(9, Card(Card.Rank.QUEEN, Card.Suit.HEART).intValue)
        assertEquals(10, Card(Card.Rank.QUEEN, Card.Suit.DIAMOND).intValue)
        assertEquals(11, Card(Card.Rank.QUEEN, Card.Suit.CLUB).intValue)
        assertEquals(12, Card(Card.Rank.JACK, Card.Suit.SPADE).intValue)
        assertEquals(13, Card(Card.Rank.JACK, Card.Suit.HEART).intValue)
        assertEquals(14, Card(Card.Rank.JACK, Card.Suit.DIAMOND).intValue)
        assertEquals(15, Card(Card.Rank.JACK, Card.Suit.CLUB).intValue)
        assertEquals(16, Card(Card.Rank.TEN, Card.Suit.SPADE).intValue)
        assertEquals(17, Card(Card.Rank.TEN, Card.Suit.HEART).intValue)
        assertEquals(18, Card(Card.Rank.TEN, Card.Suit.DIAMOND).intValue)
        assertEquals(19, Card(Card.Rank.TEN, Card.Suit.CLUB).intValue)
        assertEquals(20, Card(Card.Rank.NINE, Card.Suit.SPADE).intValue)
        assertEquals(21, Card(Card.Rank.NINE, Card.Suit.HEART).intValue)
        assertEquals(22, Card(Card.Rank.NINE, Card.Suit.DIAMOND).intValue)
        assertEquals(23, Card(Card.Rank.NINE, Card.Suit.CLUB).intValue)
        assertEquals(24, Card(Card.Rank.EIGHT, Card.Suit.SPADE).intValue)
        assertEquals(25, Card(Card.Rank.EIGHT, Card.Suit.HEART).intValue)
        assertEquals(26, Card(Card.Rank.EIGHT, Card.Suit.DIAMOND).intValue)
        assertEquals(27, Card(Card.Rank.EIGHT, Card.Suit.CLUB).intValue)
        assertEquals(28, Card(Card.Rank.SEVEN, Card.Suit.SPADE).intValue)
        assertEquals(29, Card(Card.Rank.SEVEN, Card.Suit.HEART).intValue)
        assertEquals(30, Card(Card.Rank.SEVEN, Card.Suit.DIAMOND).intValue)
        assertEquals(31, Card(Card.Rank.SEVEN, Card.Suit.CLUB).intValue)
        assertEquals(32, Card(Card.Rank.SIX, Card.Suit.SPADE).intValue)
        assertEquals(33, Card(Card.Rank.SIX, Card.Suit.HEART).intValue)
        assertEquals(34, Card(Card.Rank.SIX, Card.Suit.DIAMOND).intValue)
        assertEquals(35, Card(Card.Rank.SIX, Card.Suit.CLUB).intValue)
        assertEquals(36, Card(Card.Rank.FIVE, Card.Suit.SPADE).intValue)
        assertEquals(37, Card(Card.Rank.FIVE, Card.Suit.HEART).intValue)
        assertEquals(38, Card(Card.Rank.FIVE, Card.Suit.DIAMOND).intValue)
        assertEquals(39, Card(Card.Rank.FIVE, Card.Suit.CLUB).intValue)
        assertEquals(40, Card(Card.Rank.FOUR, Card.Suit.SPADE).intValue)
        assertEquals(41, Card(Card.Rank.FOUR, Card.Suit.HEART).intValue)
        assertEquals(42, Card(Card.Rank.FOUR, Card.Suit.DIAMOND).intValue)
        assertEquals(43, Card(Card.Rank.FOUR, Card.Suit.CLUB).intValue)
        assertEquals(44, Card(Card.Rank.THREE, Card.Suit.SPADE).intValue)
        assertEquals(45, Card(Card.Rank.THREE, Card.Suit.HEART).intValue)
        assertEquals(46, Card(Card.Rank.THREE, Card.Suit.DIAMOND).intValue)
        assertEquals(47, Card(Card.Rank.THREE, Card.Suit.CLUB).intValue)
        assertEquals(48, Card(Card.Rank.DUECE, Card.Suit.SPADE).intValue)
        assertEquals(49, Card(Card.Rank.DUECE, Card.Suit.HEART).intValue)
        assertEquals(50, Card(Card.Rank.DUECE, Card.Suit.DIAMOND).intValue)
        assertEquals(51, Card(Card.Rank.DUECE, Card.Suit.CLUB).intValue)
    }

    @Test
    fun checkValueOfInt() {
        for (i in 0..51) {
            assertEquals(i, Card.valueOf(i).intValue)
        }
    }

    @Test
    fun checkAllLongValues() {
        assertEquals(0x1L, Card(Card.Rank.ACE, Card.Suit.SPADE).longValue)
        assertEquals(0x2L, Card(Card.Rank.ACE, Card.Suit.HEART).longValue)
        assertEquals(0x4L, Card(Card.Rank.ACE, Card.Suit.DIAMOND).longValue)
        assertEquals(0x8L, Card(Card.Rank.ACE, Card.Suit.CLUB).longValue)
        assertEquals(0x10L, Card(Card.Rank.KING, Card.Suit.SPADE).longValue)
        assertEquals(0x20L, Card(Card.Rank.KING, Card.Suit.HEART).longValue)
        assertEquals(0x40L, Card(Card.Rank.KING, Card.Suit.DIAMOND).longValue)
        assertEquals(0x80L, Card(Card.Rank.KING, Card.Suit.CLUB).longValue)
        assertEquals(0x100L, Card(Card.Rank.QUEEN, Card.Suit.SPADE).longValue)
        assertEquals(0x200L, Card(Card.Rank.QUEEN, Card.Suit.HEART).longValue)
        assertEquals(0x400L, Card(Card.Rank.QUEEN, Card.Suit.DIAMOND).longValue)
        assertEquals(0x800L, Card(Card.Rank.QUEEN, Card.Suit.CLUB).longValue)
        assertEquals(0x1000L, Card(Card.Rank.JACK, Card.Suit.SPADE).longValue)
        assertEquals(0x2000L, Card(Card.Rank.JACK, Card.Suit.HEART).longValue)
        assertEquals(0x4000L, Card(Card.Rank.JACK, Card.Suit.DIAMOND).longValue)
        assertEquals(0x8000L, Card(Card.Rank.JACK, Card.Suit.CLUB).longValue)
        assertEquals(0x10000L, Card(Card.Rank.TEN, Card.Suit.SPADE).longValue)
        assertEquals(0x20000L, Card(Card.Rank.TEN, Card.Suit.HEART).longValue)
        assertEquals(0x40000L, Card(Card.Rank.TEN, Card.Suit.DIAMOND).longValue)
        assertEquals(0x80000L, Card(Card.Rank.TEN, Card.Suit.CLUB).longValue)
        assertEquals(0x100000L, Card(Card.Rank.NINE, Card.Suit.SPADE).longValue)
        assertEquals(0x200000L, Card(Card.Rank.NINE, Card.Suit.HEART).longValue)
        assertEquals(0x400000L, Card(Card.Rank.NINE, Card.Suit.DIAMOND).longValue)
        assertEquals(0x800000L, Card(Card.Rank.NINE, Card.Suit.CLUB).longValue)
        assertEquals(0x1000000L, Card(Card.Rank.EIGHT, Card.Suit.SPADE).longValue)
        assertEquals(0x2000000L, Card(Card.Rank.EIGHT, Card.Suit.HEART).longValue)
        assertEquals(0x4000000L, Card(Card.Rank.EIGHT, Card.Suit.DIAMOND).longValue)
        assertEquals(0x8000000L, Card(Card.Rank.EIGHT, Card.Suit.CLUB).longValue)
        assertEquals(0x10000000L, Card(Card.Rank.SEVEN, Card.Suit.SPADE).longValue)
        assertEquals(0x20000000L, Card(Card.Rank.SEVEN, Card.Suit.HEART).longValue)
        assertEquals(0x40000000L, Card(Card.Rank.SEVEN, Card.Suit.DIAMOND).longValue)
        assertEquals(0x80000000L, Card(Card.Rank.SEVEN, Card.Suit.CLUB).longValue)
        assertEquals(0x100000000L, Card(Card.Rank.SIX, Card.Suit.SPADE).longValue)
        assertEquals(0x200000000L, Card(Card.Rank.SIX, Card.Suit.HEART).longValue)
        assertEquals(0x400000000L, Card(Card.Rank.SIX, Card.Suit.DIAMOND).longValue)
        assertEquals(0x800000000L, Card(Card.Rank.SIX, Card.Suit.CLUB).longValue)
        assertEquals(0x1000000000L, Card(Card.Rank.FIVE, Card.Suit.SPADE).longValue)
        assertEquals(0x2000000000L, Card(Card.Rank.FIVE, Card.Suit.HEART).longValue)
        assertEquals(0x4000000000L, Card(Card.Rank.FIVE, Card.Suit.DIAMOND).longValue)
        assertEquals(0x8000000000L, Card(Card.Rank.FIVE, Card.Suit.CLUB).longValue)
        assertEquals(0x10000000000L, Card(Card.Rank.FOUR, Card.Suit.SPADE).longValue)
        assertEquals(0x20000000000L, Card(Card.Rank.FOUR, Card.Suit.HEART).longValue)
        assertEquals(0x40000000000L, Card(Card.Rank.FOUR, Card.Suit.DIAMOND).longValue)
        assertEquals(0x80000000000L, Card(Card.Rank.FOUR, Card.Suit.CLUB).longValue)
        assertEquals(0x100000000000L, Card(Card.Rank.THREE, Card.Suit.SPADE).longValue)
        assertEquals(0x200000000000L, Card(Card.Rank.THREE, Card.Suit.HEART).longValue)
        assertEquals(0x400000000000L, Card(Card.Rank.THREE, Card.Suit.DIAMOND).longValue)
        assertEquals(0x800000000000L, Card(Card.Rank.THREE, Card.Suit.CLUB).longValue)
        assertEquals(0x1000000000000L, Card(Card.Rank.DUECE, Card.Suit.SPADE).longValue)
        assertEquals(0x2000000000000L, Card(Card.Rank.DUECE, Card.Suit.HEART).longValue)
        assertEquals(0x4000000000000L, Card(Card.Rank.DUECE, Card.Suit.DIAMOND).longValue)
        assertEquals(0x8000000000000L, Card(Card.Rank.DUECE, Card.Suit.CLUB).longValue)
    }
}